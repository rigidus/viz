#+STARTUP: showall indent hidestars
#+TITLE: VIZ

* Sixel Visualizer

This program demonstrates the visualization capabilities through sixel graphics inside Xterm. It is controlled through fifos that are created: one is created to control the interface, and the other returns data about user actions: keystrokes and mouse click coordinates.

This approach can be used for interactive design of electronic circuits, software architecture management, graph editing and planning, including in no-code solutions.

Since the terminal is part of the environment, it is possible to co-manage the rendering so that the terminal acts as an X-server, but without the need for an X-server itself.

Thus, the goal of the entire project is to implement a work scheme similar to SWANK + SLIME, but with support for graphical input.

* How it works

After compiling and running via "make run", the compiled file "./a.out" will be launched in an xterm window. When it is initialized, it switches the terminal to non-blocking mode and thanks to this it sends all received user actions to fifo "test-pipe-control", and from fifo "test-pipe" it takes what needs to be shown on the screen.

Thus, in the course of work, any script can control the visualization by reading and sending messages to fifo, and the corresponding script is given as an example.

* Operations

Output to the cursor position is done using escape sequences, so it's enough to open fifo, send a line with the escape sequence into it, and close fifo.

To get keystrokes and mouse clicks, you can use reading from fifo, but you need to start reading after starting the program, because when initializing the program, the program reopens the fifo.

* Game functions

#+BEGIN_SRC lisp
  (ql:quickload "cl-ppcre")

  (defmacro bprint (var)
    `(subseq (with-output-to-string (*standard-output*)  (pprint ,var)) 1))

  (defconstant +RED+ 1)
  (defconstant +GREEN+ 2)
  (defconstant +YELLOW+ 3)
  (defconstant +BLUE+ 4)
  (defconstant +FUCHSIA+ 5)
  (defconstant +CYAN+ 6)
  (defconstant +WHITE+ 7)

  (defconstant +HELP-COLOR+ +CYAN+)
  (defconstant +SCORE-COLOR+ +GREEN+)

  (defconstant +PLAYFIELD-W+ 10)
  (defconstant +PLAYFIELD-H+ 20)
  (defconstant +PLAYFIELD-X+ 30)
  (defconstant +PLAYFIELD-Y+ 1)
  (defconstant +BORDER-COLOR+ +YELLOW+)

  (defconstant +NEXT-X+ 14)
  (defconstant +NEXT-Y+ 11)

  (defconstant +FILLED-CELL+ "[]")
  (defconstant +NEXT-EMPTY-CELL+ "  ")
  (defconstant +PLAYFIELD-EMPTY-CELL+ " .")

  (defparameter *sep* "" ;; #\Newline
    )

  (defparameter *lines-completed* 0)
  (defparameter *score* 0)
  (defparameter *level* 1)

  (defconstant +LEVEL-UP+ 20)
  (defconstant +DELAY+ 1)
  (defconstant +DELAY-FACTOR+ 0.8)

  (defparameter *tetris-delay* (* +DELAY+ 1000000))

  (defstruct tetpi
    (origin-x 0 :type fixnum)
    (origin-y 0 :type fixnum)
    (x 0 :type fixnum)
    (y 0 :type fixnum)
    (color 0 :type fixnum)
    (symmetry 0 :type fixnum)
    (orientation 0 :type fixnum)
    (data)
    (empty-cell))

  (defun xyprint (x y msg)
    (format t "~A[~A;~AH~A~A" (code-char 27) y x msg *sep*))

  (defun set-fg (color)
    (format t "~A[3~Am~A" (code-char 27) color *sep*))

  (defun set-bold ()
    (format t "~A[1m~A" (code-char 27) *sep*))

  (defun unset-bold ()
    (format t "~A[0m~A" (code-char 27) *sep*))

  (defun set-bg (color)
    (format t "~A[4~Am~A" (code-char 27) color *sep*))

  (defun reset-colors ()
    (format t "~A[0m~A" (code-char 27) *sep*))

  (defun clear-screen ()
    (format t "~A[2J~A" (code-char 27) *sep*))

  (defun get-cells (piece position)
    "piece : struct tetpi
     position : (simple-vector 3) : dx,dy,dz"
    (let* ((cells (make-array 8 :element-type 'integer :initial-element 0))
           (data (aref (tetpi-data piece) (tetpi-orientation piece)))
           (xx (tetpi-x piece))
           (yy (tetpi-y piece)))
      (when position
        (setf xx (aref position 0))
        (setf yy (aref position 1))
        (setf data (aref (tetpi-data piece) (aref position 2))))
      (loop for idx from 0 below 4 do
        (let ((x2 (* 2 idx))
              (x4 (* 4 idx)))
          (setf (aref cells x2)
                (+ xx (logand (ash data (- x4)) 3)))
          (setf (aref cells (+ 1 x2))
                (+ yy (logand (ash data (- (+ 2 x4))) 3)))))
      cells))

  (defmacro with-pipe (pipe-var &body body)
    `(let ((,pipe-var (open "./test-pipe"
                            :direction :output :if-does-not-exist :error)))
       (prog1 (progn ,@body)
         (finish-output ,pipe-var)
         (close ,pipe-var))))

  (defmacro pip (&body body)
    (let ((ret (gensym))
          (out (gensym))
          (pip (gensym)))
      `(let* ((,ret)
              (,out (progn (with-output-to-string (*standard-output*)
                             (setf ,ret (progn ,@body))
                             (finish-output)))))
         (with-pipe ,pip
           (format ,pip "~A" ,out))
         ,ret)))

  ;; this array holds all possible pieces that can be used in the game
  ;; each piece consists of 4 cells numbered from 0x0 to 0xf:
  ;; 0123
  ;; 4567
  ;; 89ab
  ;; cdef
  ;; each string is sequence of cells for different orientations
  ;; depending on piece symmetry there can be 1, 2 or 4 orientations
  ;; relative coordinates are calculated as follows:
  ;; x=((cell & 3)) y=((cell >> 2))
  (defconstant +PIECES+ '((1 #x1256 0      0      0)        ;; square
                          (2 #x159d #x4567 0      0)        ;; line
                          (2 #x4512 #x0459 0      0)        ;; s
                          (2 #x0156 #x1548 0      0)        ;; z
                          (4 #x159a #x8456 #x0159 #x2654)   ;; l
                          (4 #x1598 #x0456 #x2159 #xa654)   ;; r
                          (4 #x1456 #x1596 #x4569 #x4159))) ;; t

  (defparameter *pieces-dim* `(,(length +PIECES+) ,(length (car +PIECES+))))
  (defparameter *piece-data-len* (car *pieces-dim*))

  (defparameter *piece-data*
    (make-array *pieces-dim*
                :element-type 'fixnum
                :initial-contents +PIECES+))

  (defparameter *colors*
    (make-array 7 :initial-contents `(,+RED+ ,+GREEN+ ,+YELLOW+ ,+BLUE+
                                             ,+FUCHSIA+ ,+CYAN+ ,+WHITE+)))

  (defun get-next-piece (visible)
    (let* ((next-piece-index (random *piece-data-len*))
           (next-piece-data
             (make-array (cadr *pieces-dim*)
                         :displaced-to *piece-data*
                         :element-type 'fixnum
                         :displaced-index-offset (* (cadr *pieces-dim*)
                                                    next-piece-index)))
           (next-piece (make-tetpi
                        :origin-x +NEXT-X+
                        :origin-y +NEXT-Y+
                        :x 0
                        :y 0
                        :color (aref *colors* (random (length *colors*)))
                        :data (subseq next-piece-data 1)
                        :symmetry (aref next-piece-data 0)
                        :empty-cell +NEXT-EMPTY-CELL+)))
      (setf (tetpi-orientation next-piece)
            (random (tetpi-symmetry next-piece)))
      (draw-piece next-piece visible)
      next-piece))

  (defun position-ok (piece playfield position)
    (let ((cells (get-cells piece position))) ;; => #(2 0 1 1 2 1 1 0)
      (loop for idx from 0 below 4 do
        (let* ((xx (aref cells (* 2 idx)))         ;; x = *(cells + 2 * i);
               (yy (aref cells (+ 1 (* 2 idx)))))  ;; y = *(cells + 2 * i + 1);
          (if (or (< yy 0)
                  (>= yy +PLAYFIELD-H+)
                  (< xx 0)
                  (>= xx +PLAYFIELD-W+)
                  (not (equal 0 ;; ((*(playfield + y) >> (x * 3)) & 7) != 0
                              (logand (ash (aref playfield yy)
                                           (* -3 xx))
                                      7))))
              (return-from position-ok nil))))
      (return-from position-ok t)))

  (defun get-current-piece (next-piece playfield)
    (let ((current-piece (copy-structure next-piece)))
      (setf (tetpi-x current-piece) (/ (- +PLAYFIELD-W+ 4) 2))
      (setf (tetpi-y current-piece) 0)
      (setf (tetpi-origin-x current-piece) +PLAYFIELD-X+)
      (setf (tetpi-origin-y current-piece) +PLAYFIELD-Y+)
      (setf (tetpi-empty-cell current-piece) +PLAYFIELD-EMPTY-CELL+)
      (if (not (position-ok current-piece playfield nil))
          (error 'quit-condition1))
      (draw-piece next-piece nil) ;; очистка
      (draw-piece current-piece t)
      current-piece))

  (defun update-score (complete-lines)
    (incf *lines-completed* complete-lines)
    (incf *score* (* complete-lines complete-lines))
    (when (> *score* (* +LEVEL-UP+ *level*))
      (setf *tetris-delay* (* *tetris-delay* +DELAY-FACTOR+))
      (incf *level*))
    (set-bold)
    (set-fg +SCORE-COLOR+)
    (xyprint 0 2 (format nil "Lines completed: ~A   " *lines-completed*))
    (xyprint 0 3 (format nil "Level:           ~A   " *level*))
    (xyprint 0 4 (format nil "Score:           ~A   " *score*))
    (reset-colors))

  (defun draw-help (&key visible)
    (when visible
      (set-fg +HELP-COLOR+)
      (set-bold))
    (xyprint 58 1 "  Use cursor keys")
    (xyprint 58 2 "       or")
    (xyprint 58 3 "    s: rotate")
    (xyprint 58 4 "a: left  d: right")
    (xyprint 58 5 "    space: drop")
    (xyprint 58 6 "      q: quit")
    (xyprint 58 7 "  c: toggle color")
    (xyprint 58 8 "n: toggle show next")
    (xyprint 58 9 "h: toggle this help"))

  (defun draw-border ()
    (let ((x1 (- +PLAYFIELD-X+ 2))
          (x2 (+ +PLAYFIELD-X+ (* +PLAYFIELD-W+ 2)))
          (y 0))
      (set-bold)
      (set-fg +BORDER-COLOR+)
      (loop for i from 0 to +PLAYFIELD-H+ do
        (setf y (+ i +PLAYFIELD-Y+))
        (xyprint x1 y  "<|")
        (xyprint x2 y "|>"))
      (setf y (+ +PLAYFIELD-Y+ +PLAYFIELD-H+))
      (loop for i from 0 to (- +PLAYFIELD-W+ 1) do
        (setf x1 (+ (* i 2) +PLAYFIELD-X+))
        (xyprint x1 y "==")
        (xyprint x1 (+ y 1) "\\/"))
      (reset-colors)))

  (defun draw-playfield (playfield)
    (loop for yy from 0 below +PLAYFIELD-H+ do
      (progn
        (xyprint +PLAYFIELD-X+ (+ yy +PLAYFIELD-Y+) "")
        (loop for xx from 0 below +PLAYFIELD-W+ do
          (let* ((elt (aref playfield yy))
                 (color (logand (ash elt (* xx -3))
                                7)))
            (if (equal 0 color)
                (format t "~A" +PLAYFIELD-EMPTY-CELL+)
                ;; else
                (progn
                  (set-bg color)
                  (set-fg color)
                  (format t "~A" +FILLED-CELL+)
                  (reset-colors))))))))

  (defun cls (sym from-x to-x from-y to-y)
    (loop for yy from from-y to to-y do
      (loop for xx from from-x to to-x do
        (xyprint xx yy (format nil "~A" sym)))))

  (defun draw-piece (piece visible)
    (let ((cells (get-cells piece nil)))
      (when visible
        (set-fg (tetpi-color piece))
        (set-bg (tetpi-color piece))
        )
      (loop for idx from 0 below 4 do
        (let ((xx (+ (* (aref cells (* 2 idx)) 2)  (tetpi-origin-x piece)))
              (yy (+ (aref cells (+ 1 (* 2 idx)))  (tetpi-origin-y piece))))
          (xyprint xx yy (if visible
                             +FILLED-CELL+
                             +PLAYFIELD-EMPTY-CELL+))))
      (when visible
        (reset-colors))))

  (defun redraw-screen (next-piece current-piece playfield)
    (clear-screen)
    (draw-help :visible t)
    (update-score 0)
    (draw-border)
    (draw-playfield playfield)
    (draw-piece next-piece t)
    (draw-piece current-piece t)
    )

  (defun flatten-piece(piece playfield)
    (let ((xx 0)
          (yy 0)
          (cells (get-cells piece nil)))
      (loop for ii from 0 below 4 do
        (setf xx
              (aref cells (* 2 ii)))
        (setf yy
              (aref cells (+ 1 (* 2 ii))))
        (setf (aref playfield yy)
              (logior (aref playfield yy)
                      (ash (tetpi-color piece)
                           (* xx 3)))))))

  (defun line-complete (line)
    (loop for ii from 0 below +PLAYFIELD-W+ do
      (when (equal 0 (logand (ash line (* ii -3)) 7))
        (return-from line-complete nil)))
    (return-from line-complete t))

  (defun process-complete-lines (playfield)
    (let ((complete-lines 0))
      (loop for ii from 0 below +PLAYFIELD-H+ do
        (when (line-complete (aref playfield ii))
          (loop for jj from ii above 0 do
            (setf (aref playfield jj)
                  (aref playfield (- jj 1))))
          (setf (aref playfield 0) 0)
          (incf complete-lines)))
      complete-lines))

  (defun process-fallen-piece(piece playfield)
    (let ((complete-lines 0))
      (flatten-piece piece playfield)
      (setf complete-lines
            (process-complete-lines playfield))
      (when (> complete-lines 0)
        ;; (error 'sss)
        (update-score complete-lines)
        (draw-playfield playfield))))

  (defun move (piece playfield dx dy dz)
    (let* ((new-x (+ dx (tetpi-x piece)))
           (new-y (+ dy (tetpi-y piece)))
           (new-orientation (mod (+ dz (tetpi-orientation piece))
                                 (tetpi-symmetry piece)))
           (new-position
             (make-array 3 :initial-contents `(,new-x ,new-y ,new-orientation))))
      (if (not (position-ok piece playfield new-position))
          (equal dy 0) ;; return value
          ;; else
          (progn
            (draw-piece piece nil) ;; стереть
            (setf (tetpi-x piece) new-x)
            (setf (tetpi-y piece) new-y)
            (setf (tetpi-orientation piece) new-orientation)
            (draw-piece piece t) ;; нарисовать
            t))))

  (defun cmd-right (piece playfield)
    (move piece playfield 1 0 0))

  (defun cmd-left (piece playfield)
    (move piece playfield -1 0 0))

  (defun cmd-rotate (piece playfield)
    (move piece playfield 0 0 1))

  (defun cmd-down (piece playfield)
    (when (move piece playfield 0 1 0)
      (return-from cmd-down t))
    (process-fallen-piece piece playfield)
    (return-from cmd-down nil))

  (defun cmd-drop (piece playfield)
    (tagbody
       re
       (when (cmd-down piece playfield)
         (go re))))



  (define-condition quit-condition () ())

  (defun start (init fn)
    (let ((process
            (sb-ext:run-program "/usr/bin/xterm" '("-e" "./a.out") :wait nil)))
      (sleep 1) ;; need pause for open pipe
      (let ((my-pipe (open "test-pipe-ctrl"
                           :direction :input :if-does-not-exist :error)))
        (funcall init)
        (handler-case
            (block loop-block
              (let ((str ""))
                (loop for ch = (handler-case (read-char my-pipe)
                                 (end-of-file () (return-from loop-block)))
                      do (progn
                           (if (not (char= ch #\newline))
                               (setf str (format nil "~A~C" str ch))
                               ;; else
                               (progn
                                 (funcall fn str process)
                                 (setf str "")))))))
          (quit-condition ()
            (progn
              (close my-pipe)
              (sb-ext:process-close process)))))))

  ;; ------------

  (progn
    (defparameter *next-visible* t)
    (defparameter *playfield* (make-array +PLAYFIELD-H+ :initial-element 0))
    (start
     #'(lambda ()
         (pip
           (defparameter *next-piece* (get-next-piece *next-visible*))
           (defparameter *current-piece* (get-current-piece *next-piece* *playfield*))
           (setf *next-piece* (get-next-piece *next-visible*))
           (redraw-screen *next-piece* *current-piece* *playfield*)))
     #'(lambda (par process)
         (let ((splt (loop for numstr in (cl-ppcre:split "[\\.:]" par)
                           collect (parse-integer numstr :radix 16 :junk-allowed nil))))
           (format t "~%~{~2X~^.~} " splt)
           (and (equal #x1B (nth 0 splt)) (equal #x5B (nth 1 splt))
                ;; (print "cursor or mouse")
                (ccase (nth 2 splt)
                  (#x44 (pip (cmd-left *current-piece* *playfield*)))
                  (#x43 (pip (cmd-right *current-piece* *playfield*)))
                  (#x41 (pip (cmd-rotate *current-piece* *playfield*)))
                  (#x42 (pip (cmd-down *current-piece* *playfield*)))
                  (#x36 (and (equal #x7E (nth 3 splt))
                             (progn
                               (pip (cmd-drop *current-piece* *playfield*))
                               (pip (setf *current-piece*
                                          (get-current-piece *next-piece* *playfield*)))
                               (pip (setf *next-piece*
                                          (get-next-piece *next-visible*))))))
                  (#x4D (progn
                          (format t "mouse at (~A : ~A) - " (nth 4 splt) (nth 5 splt))
                          (ccase (nth 3 splt)
                            (#x20 (format t "left press"))
                            (#x21 (format t "middle press"))
                            (#x22 (format t "right press"))
                            (#x23 (format t "no press"))
                            (#x61 (format t "scroll down"))
                            (#x60 (format t "scroll up")))))))
           (and (equal 0 (loop for chank in splt sum chank))
                (unless (pip (cmd-down *current-piece* *playfield*))
                  (pip
                    (setf *current-piece*
                          (get-current-piece *next-piece* *playfield*)))
                  (pip
                    (setf *next-piece* (get-next-piece *next-visible*)))))))))

  ;; (defun dbg-show-playfield (playfield)
  ;;   (format t "~%")
  ;;   (loop for yy from 0 below +PLAYFIELD-H+ do
  ;;     (progn
  ;;       (loop for xx from 0 below +PLAYFIELD-W+ do
  ;;         (let* ((elt (aref playfield yy))
  ;;                (color (logand (ash elt (* xx -3))
  ;;                               7)))
  ;;           (if (equal 0 color)
  ;;               (format t "~A" +PLAYFIELD-EMPTY-CELL+)
  ;;               ;; else
  ;;               (progn
  ;;                 (format t "~A" +FILLED-CELL+)))))
  ;;       (format t "~%"))))

  ;; (dbg-show-playfield *playfield*)
#+END_SRC

* Makefile

see ./Makefile

#+BEGIN_SRC sh
  SHELL = /bin/sh

  all: compile

  compile:
      gcc viz.c

  run:
      xterm -e ./a.out
#+END_SRC

* Main

This is frame for all program code.

see [[*Init][Init]] and [[*Loop][Loop]]

#+NAME: main
#+BEGIN_SRC c :tangle viz.c :noweb yes
  /* INCLUDES */
  <<incs>>

  /* DEFINES */
  <<defs>>

  /* STRUCTURES */
  <<structs>>

  /* DECLARATIONS */
  <<decls>>

  /* GLOBALS */
  <<globs>>

  /* FUNCTIONS */
  <<funcs>>

  /* MAIN */
  int main(int argc, char* argv[]) {
      <<vars>>
      <<init>>
      <<loop>>
  }
#+END_SRC

* Incs

#+NAME: incs
#+BEGIN_SRC c
  #include <stdio.h>
  #include <termios.h>
  #include <unistd.h>
  #include <fcntl.h>
  #include <stdlib.h>
  #include <string.h>
  #include <ctype.h>
  #include <time.h>
  #include <sys/time.h>
  #include <errno.h>
  #include <sys/types.h>
  #include <sys/stat.h>
#+END_SRC

* Defs

#+NAME: defs
#+BEGIN_SRC c
  #define ESC 27

  #define DELAY 1
  #define DELAY_FACTOR 0.8

  #define SCORE_X 1
  #define SCORE_Y 2
  #define SCORE_COLOR GREEN

  #define HELP_X 58
  #define HELP_Y 1
  #define HELP_COLOR CYAN
#+END_SRC

* Structs

#+NAME: structs
#+BEGIN_SRC c
  struct termios terminal_conf;
  int use_color = 1;
  long tetris_delay = DELAY * 1000000;

  typedef struct {
      int origin_x;
      int origin_y;
      int x;
      int y;
      int color;
      int symmetry;
      int orientation;
      int *data;
      char empty_cell[3];
  } tetris_piece_s;
#+END_SRC

* Funcs
** Printing at position

#+BEGIN_SRC c :noweb-ref decls
  void xyprint(int x, int y, char *s);
#+END_SRC

#+BEGIN_SRC c :noweb-ref funcs
  void xyprint(int x, int y, char *s) {
      printf("\033[%d;%dH%s", y, x, s);
  }
#+END_SRC

** Exit functions

#+BEGIN_SRC c :noweb-ref decls
  void my_exit (int retcode);
  void error_exit(int errsv);
  void cmd_quit();
#+END_SRC

#+BEGIN_SRC c :noweb yes :noweb-ref funcs
  void my_exit (int retcode) {
      int flags = fcntl(STDOUT_FILENO, F_GETFL);
      fcntl(STDOUT_FILENO, F_SETFL, flags & (~O_NONBLOCK));
      tcsetattr(STDIN_FILENO, TCSANOW, &terminal_conf);
      <<fin>>
      exit(retcode);
  }
  void error_exit(int errsv) {
      if (EINTR == errsv) {
      } else if (EAGAIN == errsv) {
      } else if (EWOULDBLOCK == errsv) {
      } else {
          /* close descriptor immediately */
      }
      xyprint(1,1, strerror(errsv));
      my_exit(EXIT_FAILURE);
  }
  void cmd_quit() {
      my_exit(0);
  }
#+END_SRC

** Get current microseconds

#+BEGIN_SRC c :noweb-ref decls
  long get_current_micros();
#+END_SRC

#+BEGIN_SRC c :noweb-ref funcs
  long get_current_micros() {
      struct timeval t;

      gettimeofday(&t, NULL);
      return t.tv_usec + t.tv_sec * 1000000;
  }
#+END_SRC

* Vars

#+BEGIN_SRC c :noweb yes :noweb-ref vars
  char c = 0;
  char key[] = {0, 0, 0};
  tcflag_t c_lflag_orig = 0;
  int i = 0;
  int flags = fcntl(STDOUT_FILENO, F_GETFL);
  long last_down_time = 0;
#+END_SRC

* Init

#+NAME: init
#+BEGIN_SRC c :noweb yes
  <<xterm>>
  <<nonblock_stdout>>
  <<init_cursor>>
  <<init_mouse>>
  <<init_pipe>>
#+END_SRC

** XTerm

echo -n "\u001B[0c"позволяет проверить поддержку Sixel

#+NAME: xterm
#+BEGIN_SRC c
  /* Run under XTerm only */
  /* or sixel support : https://stackoverflow.com/questions/18379477/how-to-interpret-response-from-vt-100-vt-102-da-request/18380004#18380004 */
  int   xterm = 0;
  char* term = getenv("TERM");
  if (term) {
      if (0 == strcmp("dumb", term))  {
          printf("Error: This program does not work under dumb terminal!\n");
      } else if (0 == strcmp("xterm", term))  {
          xterm = 1;
      }
  }
  if (!xterm) {
      printf("Error: This program run under XTerm only!\n");
      return -1;
  }
#+END_SRC

** Nonblock stdout

#+NAME: nonblock_stdout
#+BEGIN_SRC c
  /* set non-block on stdout */
  fcntl(STDOUT_FILENO, F_SETFL, flags | O_NONBLOCK);
  /* read stdin configuration to termios struct */
  tcgetattr(STDIN_FILENO, &terminal_conf);
  /* save original local modes */
  c_lflag_orig = terminal_conf.c_lflag;
  /* canonical mode off, echo off */
  terminal_conf.c_lflag &= ~(ICANON | ECHO);
  /* set updated termios struct */
  tcsetattr(STDIN_FILENO, TCSANOW, &terminal_conf);
  /* copy original local modes field to the termios struct */
  terminal_conf.c_lflag = c_lflag_orig;
  /* */
  last_down_time = get_current_micros();
  srandom(time(NULL));
#+END_SRC

** Cursor control

#+BEGIN_SRC c :noweb-ref globs
  int  flag_cursor_control = 0;
#+END_SRC

#+BEGIN_SRC c :noweb-ref decls
  void cursor_control_on();
  void cursor_control_off();
#+END_SRC

#+BEGIN_SRC c :noweb-ref funcs
  void cursor_control_on() {
      printf("\033[?25l");
      printf("\033[2;1'z"); /* switch on pixel resolution: \e[2;1'z */
      flag_cursor_control = 1;
  }
  void cursor_control_off() {
      printf("\033[?25h");
      flag_cursor_control = 0;
  }
#+END_SRC

#+NAME: init_cursor
#+BEGIN_SRC c
  /* init cursor */
  cursor_control_on();
#+END_SRC

#+BEGIN_SRC c :noweb-ref fin
  if (flag_cursor_control) {
      cursor_control_off();
  }
#+END_SRC

** Mouse control

TODO: pixel mouse resolution
https://stackoverflow.com/questions/44116977/get-mouse-position-in-pixels-using-escape-sequences

xterm reports the mouse position with pixel resolution with the
following escape sequences:

    switch on pixel resolution: \e[2;1'z
    report mouse position: \e['|

Details are described at http://invisible-island.net/xterm/ctlseqs/ctlseqs.html

Additional info: These xterm escape sequences (DECELR and DECRQLP) are
also supported by Tera Term (https://osdn.net/projects/ttssh2/) and
recent versions of mlterm (http://mlterm.sourceforge.net/). All three
seem to support Sixel graphics, so together these features can be used
to build rudimentary GUIs.

https://stackoverflow.com/questions/5966903/how-to-get-mousemove-and-mouseclick-in-bash/5970472#5970472

The xterm terminal emulator defines some control sequences to do mouse tracking, you can learn more about them in the section Mouse Tracking in the document ctlseqs for the xterm distribution. If you have xterm installed, you'll probably have a copy at /usr/share/doc/xterm/ctlseqs.txt.gz or a similar path.

Most terminal emulators running on the X Window System (e.g: Konsole, gnome-terminal, eterm, ...) understand at least some of these control sequences. If you want to use them directly on one of Linux's virtual terminals, you'll probably have to run gpm(8).

There are several control sequences for enabling and disabling mouse movement reporting:

    9 -> X10 mouse reporting, for compatibility with X10's xterm, reports on button press.
    1000 -> X11 mouse reporting, reports on button press and release.
    1001 -> highlight reporting, useful for reporting mouse highlights.
    1002 -> button movement reporting, reports movement when a button is pressed.
    1003 -> all movement reporting, reports all movements.

The control sequence is CSI ? number h for enabling and CSI ? number l for disabling. CSI is either ESC [ or character 0x9b. So, you could use them as follows:

echo -e "\e[?1000h"

Then, you'll get a bunch of characters on button press, see ctlseqs or console_codes(4) for details. Then, you can disable mouse tracking with:

echo -e "\e[?1000l"

Unfortunately, the previous mouse reporting modes can only handle coordinates up to 223 (255 - 32), or in some situations 95 (127 - 32). So there are some new switches to change the format in which mouse coordinates are reported:

    1006 -> report back as decimal values (xterm, many other terminal emulators, but not urxvt)
    1015 -> report back as decimal values (urxvt, xterm, other terminal emulators, some applications find it complex to parse)
    1005 -> report back encoded as utf-8 (xterm, urxvt, broken in several ways)

A good strategy for an application would be to enable mouse reporting, then (optionally request urxvt 1015 mode and then) request SGR 1006 mode. The application should handle both the new and legacy mouse reporting responses, to continue working on terminal emulators without support for the new modes.

#+BEGIN_SRC c :noweb-ref globs
  int  flag_mouse_control = 0;
#+END_SRC

#+BEGIN_SRC c :noweb-ref decls
  void mouse_control_on();
  void mouse_control_off();
#+END_SRC

#+BEGIN_SRC c :noweb-ref funcs
  void mouse_control_on() {
      printf("\033[?1000h");
      /* Mouse trap all, urxvt, SGR1006  */
      /* printf("\033[1003h\033[1015h\033[1006h"); */
      flag_mouse_control = 1;
  }
  void mouse_control_off() {
      /* Disable mouse trap */
      printf("\033[?1000l");
      flag_mouse_control = 0;
  }
#+END_SRC

#+NAME: init_mouse
#+BEGIN_SRC c
  /* init mouse */
  mouse_control_on();
#+END_SRC

#+BEGIN_SRC c :noweb-ref fin
  if (flag_mouse_control) {
      mouse_control_off();
  }
#+END_SRC

** Init and fin pipe

#+BEGIN_SRC c :noweb-ref globs
  char myfifo[] = "test-pipe";
  int  fdfifo = 0;
  char myfifo_ctrl[] = "test-pipe-ctrl";
  int  fdfifo_ctrl = 0;
#+END_SRC

#+NAME: init_pipe
#+BEGIN_SRC c
  /* remove if exist, create and open named non-block pipe */
  if (access(myfifo, F_OK) == 0) {
      remove(myfifo);
  }
  if (-1 == mkfifo(myfifo, 0777)) {
      perror("Error while creating the pipe.\n");
      my_exit(EXIT_FAILURE);
  }
  if (chmod (myfifo, 0777) < 0)
  {
      fprintf(stderr, "Error: chmod pipe - %d (%s)\n", errno, strerror(errno));
      my_exit(EXIT_FAILURE);
  }
  fdfifo = open(myfifo, O_RDWR | O_NONBLOCK);
  /* control fifo | TODO: O_READ & 0_WRITE */
  if (access(myfifo_ctrl, F_OK) == 0) {
      remove(myfifo_ctrl);
  }
  if (-1 == mkfifo(myfifo_ctrl, 0777)) {
      perror("Error while creating the pipe control.\n");
      my_exit(EXIT_FAILURE);
  }
  if (chmod (myfifo_ctrl, 0777) < 0)
  {
      fprintf(stderr, "Error: chmod pipe - %d (%s)\n", errno, strerror(errno));
      my_exit(EXIT_FAILURE);
  }
  fdfifo_ctrl = open(myfifo_ctrl, O_RDWR);
#+END_SRC

#+BEGIN_SRC c :noweb-ref fin
  if (fdfifo) {
      close(fdfifo);
  }
    if (fdfifo_ctrl) {
      close(fdfifo_ctrl);
  }
#+END_SRC

* Loop

https://linux.die.net/man/3/fd_set

select() позволяет программе отслеживать несколько файловых
дескрипторов, ожидая, пока один или несколько из них станут "готовыми"
для некоторого класса операции ввода-вывода (например,
ввода). Файловый дескриптор считается готовым, если можно выполнить
соответствующую операцию ввода-вывода (например, read) без блокировки.

select() использует тайм-аут, который представляет собой struct
timeval (с секундами и микросекундами).

Наблюдаются три независимых набора файловых дескрипторов. Те, что
перечислены в readfds, будут отслеживаться, чтобы увидеть, станут ли
символы доступными для чтения. (точнее, чтобы увидеть, не блокируется
ли чтение; в частности, файловый дескриптор также готов в конце
файла), те, что в writefds, будут отслеживаться, чтобы посмотрите, не
будет ли блокироваться запись, а те, что в excludefds, будут
отслеживаться на предмет исключений. При выходе наборы изменяются на
месте, чтобы указать, какой файл дескрипторы фактически изменили
статус. Каждый из трех наборов файловых дескрипторов может быть указан
как NULL, если ни один файловый дескриптор не должен отслеживаться в
течение соответствующий класса событий.

Для управления наборами предусмотрено четыре макроса. FD_ZERO()
очищает набор. FD_SET() и FD_CLR() соответственно добавляют и удаляют
заданный файл дескриптор из набора. FD_ISSET() проверяет, является ли
файловый дескриптор частью набора; это полезно после возврата из
select.

nfds — это файловый дескриптор с наибольшим номером в любом из трех
наборов плюс 1.

Аргумент timeout задает минимальный интервал, в течение которого
select() должен блокировать ожидание готовности файлового
дескриптора. (Этот интервал будут округлены до степени детализации
системных часов, а задержки планирования ядра означают, что интервал
блокировки может быть превышен на небольшую величину.) Если оба поля
структуры timeval равны нулю, то select() немедленно
возвращается. (Это полезно для опроса). Если тайм-аут равен NULL (без
тайм-аута), select() может блокироваться на неопределенный срок.

В случае успеха select() и pselect() возвращают количество файловых
дескрипторов, содержащихся в трех возвращенных наборах дескрипторов
(то есть общее количество битов, установленных в readfds , writefds ,
excludefds), которое может быть равно нулю, если тайм-аут истекает до
того, как произойдет что-то интересное. В случае ошибки возвращается
-1, и errno устанавливается соответствующим образом; наборы и время
ожидания становятся неопределенными, поэтому не полагайтесь на их
содержимое после ошибки.

В Linux функция select() может сообщать дескриптор файла сокета как
«готовый для чтения», в то время как последующее чтение
блокируется. Это может например происходит, когда данные прибыли, но
при проверке имеют неправильную контрольную сумму и
отбрасываются. Могут быть и другие обстоятельства, при которых
дескриптор файла ложно сообщает о готовности. Таким образом, может
быть безопаснее использовать O_NONBLOCK для сокетов, которые не должны
блокироваться.

#+NAME: loop
#+BEGIN_SRC c
  /* loop */
  while(1) {
      long delay = last_down_time + tetris_delay - get_current_micros();

      char stdi_buf[16] = {0};

      /* DELAY */

      struct timeval tv;
      fd_set fs;

      /* заполняем структуру ожидания */
      tv.tv_sec = 0;
      tv.tv_usec = 0;
      if (delay > 0) {
          tv.tv_sec = delay / 1000000;
          tv.tv_usec = delay % 1000000;
      }

      /* ожидаем на select-e */
      /* здесь мы неявно предполагаем, что fdfifo больше stdin */
      FD_ZERO(&fs);                 /* clear a set */
      FD_SET(STDIN_FILENO, &fs);    /* add stdin */
      FD_SET(fdfifo, &fs);          /* add fdfifo */
      int nfds = fdfifo + 1;        /* вместо fdfifo + 1 */
      select(nfds, &fs, 0, 0, &tv);

      /* тут мы оказываемся, если что-то пришло или таймаут */
      int fifo_flag = FD_ISSET(fdfifo, &fs);
      int stdin_flag = FD_ISSET(STDIN_FILENO, &fs);

      /* DELAY END */

      if (fifo_flag) {
          char pipe_buf[65535] = {0}; // initialization by zeros
          int pipe_buf_len = read(fdfifo, pipe_buf, sizeof(pipe_buf));
          if (0 > pipe_buf_len) {
              printf("err: read_and_show_pipe"); // TODO: replace to show_error()
              error_exit(errno);
          }
          char tmp[65535] = {0};
          sprintf(tmp, "%s", pipe_buf);
          xyprint(0, 29, tmp);
      }

      void outbuf () {
          char tmp[1024]={0};
          int tmp_len =
              sprintf(tmp,
                      "%02X.%02X.%02X.%02X:%02X.%02X.%02X.%02X:%02X.%02X.%02X.%02X:%02X.%02X.%02X.%02X",
                      stdi_buf[0], stdi_buf[1], stdi_buf[2], stdi_buf[3], stdi_buf[4],
                      stdi_buf[5], stdi_buf[6], stdi_buf[7], stdi_buf[8], stdi_buf[9],
                      stdi_buf[10], stdi_buf[11], stdi_buf[12], stdi_buf[13],
                      stdi_buf[14], stdi_buf[15]);
          xyprint(0, 25, tmp);
          /* raw output */
          xyprint(0, 26, stdi_buf);
          /* пишем в отдельный fifo */
          write(fdfifo_ctrl, tmp, tmp_len);
          write(fdfifo_ctrl, "\n", 1); /* need for line-buferization */
          fsync(fdfifo_ctrl);
      }

      if (stdin_flag) {
          int stdi_buf_len = read(STDIN_FILENO, stdi_buf, sizeof(stdi_buf));
          if (0 > stdi_buf_len) {
              printf("err: read_and_show_stdin"); // TODO: replace to show_error()
              error_exit(errno);
          }
          outbuf();
      }

      if ((!fifo_flag) && (!stdin_flag)) {
          outbuf();
      }

      // -------------

      c = stdi_buf[0];
      key[2] = key[1];
      key[1] = key[0];
      if (key[2] == ESC && key[1] == '[') {
          key[0] = c;
      } else {
          key[0] = tolower(c);
      }
      switch(key[0]) {
      case 3:
      case 'q':
          cmd_quit();
          break;
      case 0:
          last_down_time = get_current_micros();
          break;
      default:
          break;
      }
      fflush(stdout);
  }
#+END_SRC

* WAIT Send through pipe

#+BEGIN_SRC lisp
  (defun start-python ()
    (let ((process
            (sb-ext:run-program "/usr/bin/python3" nil
                                :output :stream
                                :input :stream
                                :wait nil
                                :pty t
                                :error *standard-output*)))
      process))

  (defun read-until-newline (process)
    (let ((r ""))
      (loop for c = (read-char-no-hang (sb-ext:process-pty process))
            do (progn
                 (if (or (not c) (char= c #\newline))
                     (return-from read-until-newline r)
                     (setf r (concatenate 'string r (format nil "~c" c))))))))

  (defun print-all-output (process &key (discard nil))
    (sleep 0.1)
    (loop
      do (progn
           (if (listen (sb-ext:process-pty process))
               (if (not discard)
                   (print (read-until-newline process))
                   (read-until-newline process))
               (return)))))

  (defun send-to-python (process str)
    (format (sb-ext:process-pty process) str)
    (finish-output (sb-ext:process-pty process)))

  (defun test-process-stream ()
    (let* ((process (start-python)))
      (print-all-output process :discard t) ;;discard banner message
      (send-to-python process "X=[1,2,3,4,5]~%print(X[:2],X[2:])~%X~%")
      (print-all-output process)
      (sb-ext:process-close process)
      ))

  (test-process-stream)
#+END_SRC
